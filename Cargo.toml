[workspace]
resolver = "3"
default-members = ["crates/fire-and-sword"]
members = ["crates/fire-and-sword", "crates/shader-types", "crates/shaders"]
exclude = ["crates/shaders"]


[workspace.package]
version = "0.1.0"
license = "MIT"
repository = "https://github.com/Niedzwiedzw/fire-and-sword"
categories = ["wasm"]
# readme = "README.md"
edition = "2021"


[workspace.dependencies]
anyhow = { version = "1.0" }
clap = { version = "4.5.32", features = ["derive", "cargo", "env"] }
derive_more = { version = "2.0.1", features = ["full"] }
futures = { version = "0.3.31" }
futures-util = { version = "0.3.31" }
itertools = { version = "0.14.0" }
tap = { version = "1.0" }
tokio = { version = "1.44", features = ["full"] }
tokio-stream = { version = "0.1.17", features = ["full"] }
tracing = { version = "0.1" }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
wgpu = { version = "24.0" }
winit = { git = "https://github.com/rust-windowing/winit", rev = "ae28eea406d16cb991f95eeff2df4278c250f4fe" }
glam = { version = ">=0.22, <=0.29", default-features = false }


# Enable incremental by default in release mode.
[profile.release]
incremental = true
# HACK(eddyb) this is the default but without explicitly specifying it, Cargo
# will treat the identical settings in `[profile.release.build-override]` below
# as different sets of `rustc` flags and will not reuse artifacts between them.
codegen-units = 256

# Compile build-dependencies in release mode with the same settings
# as regular dependencies (including the incremental enabled above).
[profile.release.build-override]
opt-level = 3
incremental = true
codegen-units = 256

# HACK(eddyb) reduce the number of linker exports and/or imports, by avoiding
# inter-CGU linkage, to stay under the 64Ki MSVC limit for `rustc_codegen_spirv`
# when building it in "debug mode" (only relevant to CI for now, realistically),
# i.e. working around this issue: https://github.com/rust-lang/rust/issues/53014.
[profile.dev]
# HACK(eddyb) fewer inter-crate exports/imports (not just inter-CGU), but sadly
# not configurable w/o breaking `Cargo.toml` parsing from non-nightly Cargo
# (moved to `.github/workflows/ci.yaml` as `RUSTFLAGS: -Zshare-generics=off`).
#
# rustflags = ["-Zshare-generics=off"]
codegen-units = 1
